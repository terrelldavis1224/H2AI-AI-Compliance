#%%
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
#%%

# Load the dataset that would be generated by the previous script
# For demo purposes, we'll create a smaller version here
def analyze_sterilization_data(df):
    """
    Analyze patterns in the TennCare sterilization consent form data.
    This function demonstrates the analysis you could run on the synthetic dataset.
    """
    # Sample size
    print(f"Total records in dataset: {len(df)}")

    # Compliance rates
    compliant = (df['WaitingPeriodFlag'] == 0).sum()
    non_compliant = (df['WaitingPeriodFlag'] == 1).sum()
    print(f"\nCompliance with 30-day waiting period: {compliant / len(df) * 100:.2f}%")
    print(f"Non-compliance with 30-day waiting period: {non_compliant / len(df) * 100:.2f}%")

    # Waiting period distribution
    plt.figure(figsize=(10, 6))
    sns.histplot(df['WaitingPeriodDays'], bins=30, kde=True)
    plt.axvline(x=30, color='red', linestyle='--', label='30-day threshold')
    plt.title('Distribution of Waiting Period Days')
    plt.xlabel('Days')
    plt.ylabel('Count')
    plt.legend()
    plt.tight_layout()
    plt.savefig('waiting_period_distribution.png')

    # Compliance by race/ethnicity
    compliance_by_race = df.groupby('RaceAndEthnicDesignation')['WaitingPeriodFlag'].mean()
    print("\nNon-compliance rates by race/ethnicity:")
    for race, rate in compliance_by_race.items():
        print(f"{race}: {rate * 100:.2f}%")

    # Compliance by operation type
    compliance_by_operation = df.groupby('SpecifyTypeOfOperation')['WaitingPeriodFlag'].mean()
    print("\nNon-compliance rates by operation type:")
    for op, rate in compliance_by_operation.items():
        print(f"{op}: {rate * 100:.2f}%")

    # Interpreter usage by race/ethnicity
    interpreter_by_race = df.groupby('RaceAndEthnicDesignation')['InterpreterSignature'].mean()
    print("\nInterpreter usage rates by race/ethnicity:")
    for race, rate in interpreter_by_race.items():
        print(f"{race}: {rate * 100:.2f}%")

    # Correlation between interpreter usage and waiting period compliance
    interpreter_compliance = pd.crosstab(
        df['InterpreterSignature'],
        df['WaitingPeriodFlag'],
        normalize='index'
    ) * 100

    print("\nWaiting period non-compliance rates by interpreter usage:")
    print(f"With interpreter: {interpreter_compliance.loc[1, 1]:.2f}%")
    print(f"Without interpreter: {interpreter_compliance.loc[0, 1]:.2f}%")

    # Create correlation heatmap
    corr = df[['RecipientSignature', 'InterpreterSignature', 'WaitingPeriodFlag']].corr()
    plt.figure(figsize=(8, 6))
    sns.heatmap(corr, annot=True, cmap='coolwarm', vmin=-1, vmax=1)
    plt.title('Correlation Matrix')
    plt.tight_layout()
    plt.savefig('correlation_heatmap.png')

    # Time series analysis of compliance over time
    df['DateOfRecipientSignature'] = pd.to_datetime(df['DateOfRecipientSignature'])
    df['Month'] = df['DateOfRecipientSignature'].dt.to_period('M')
    monthly_compliance = df.groupby('Month')['WaitingPeriodFlag'].mean() * 100

    plt.figure(figsize=(12, 6))
    monthly_compliance.plot(kind='line', marker='o')
    plt.title('Monthly Non-Compliance Rate Over Time')
    plt.xlabel('Month')
    plt.ylabel('Non-Compliance Rate (%)')
    plt.grid(True, alpha=0.3)
    plt.tight_layout()
    plt.savefig('monthly_compliance_trend.png')

    print("\nAnalysis complete. Visualizations saved.")

#%%
# This function would be used to analyze the actual data
# analyze_sterilization_data(sterilization_data)

# For demonstration, explain how to use the analysis
print("""
To analyze the generated dataset:
1. Run the first script to generate synthetic data
2. Load the saved CSV file
3. Run this analysis script with the following code:

```python
import pandas as pd
from analysis_script import analyze_sterilization_data

# Load the generated data
df = pd.read_csv('tenncare_sterilization_consent_synthetic_data.csv')

# Run the analysis
analyze_sterilization_data(df)
```

This will produce summary statistics and visualizations to help identify patterns
in compliance with the 30-day waiting period requirement across different
demographic groups and operation types.
""")
#%%
df = pd.read_csv('/Users/sayam_palrecha/my_project/Hackathon/train_data.csv')
analyze_sterilization_data(df)